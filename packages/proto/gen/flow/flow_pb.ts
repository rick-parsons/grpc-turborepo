// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file flow/flow.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { User } from "../user/user_pb.js";

/**
 * @generated from message Flow
 */
export class Flow extends Message<Flow> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: optional string description = 3;
   */
  description?: string;

  constructor(data?: PartialMessage<Flow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Flow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Flow {
    return new Flow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Flow {
    return new Flow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Flow {
    return new Flow().fromJsonString(jsonString, options);
  }

  static equals(a: Flow | PlainMessage<Flow> | undefined, b: Flow | PlainMessage<Flow> | undefined): boolean {
    return proto3.util.equals(Flow, a, b);
  }
}

/**
 * @generated from message GetByIdRequest
 */
export class GetByIdRequest extends Message<GetByIdRequest> {
  /**
   * unique flow identifier
   *
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<GetByIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "GetByIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetByIdRequest {
    return new GetByIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetByIdRequest {
    return new GetByIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetByIdRequest {
    return new GetByIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetByIdRequest | PlainMessage<GetByIdRequest> | undefined, b: GetByIdRequest | PlainMessage<GetByIdRequest> | undefined): boolean {
    return proto3.util.equals(GetByIdRequest, a, b);
  }
}

/**
 * @generated from message GetByIdResponse
 */
export class GetByIdResponse extends Message<GetByIdResponse> {
  /**
   * flow object
   *
   * @generated from field: Flow flow = 1;
   */
  flow?: Flow;

  /**
   * user object
   *
   * @generated from field: User user = 2;
   */
  user?: User;

  constructor(data?: PartialMessage<GetByIdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "GetByIdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "flow", kind: "message", T: Flow },
    { no: 2, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetByIdResponse {
    return new GetByIdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetByIdResponse {
    return new GetByIdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetByIdResponse {
    return new GetByIdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetByIdResponse | PlainMessage<GetByIdResponse> | undefined, b: GetByIdResponse | PlainMessage<GetByIdResponse> | undefined): boolean {
    return proto3.util.equals(GetByIdResponse, a, b);
  }
}

